{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhu\\\\COSMOCHAT-UI\\\\cosmochatui\\\\src\\\\App.js\";\nimport { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport React, { useState } from 'react';\nimport './App.css';\nconst API_KEY = \"sk-None-D5lH5Bi5CZOzitfWuXiJT3BlbkFJKfXbg2qxC6EAVpiuSiDb\";\nfunction App() {\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I am ChatGPT\",\n    sender: \"CHATGPT\",\n    direction: \"incoming\"\n  }]);\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetries = 3;\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setTyping(true);\n    await processMessageToChatGPT([...messages, newMessage]);\n  };\n  async function handleAPIError(statusCode) {\n    if (statusCode === 429 && retryCount < maxRetries) {\n      const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff\n      setTimeout(() => {\n        setRetryCount(retryCount + 1);\n        processMessageToChatGPT(messages); // Retry the API request after the delay\n      }, delay);\n    } else {\n      setRetryCount(0); // Reset retry count on different error or max retries reached\n      console.error('API Error or max retries reached with status:', statusCode);\n    }\n  }\n  async function processMessageToChatGPT(chatMessages) {\n    try {\n      const apiMessage = chatMessages.map(messageObject => {\n        return {\n          role: messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\",\n          content: messageObject.message\n        };\n      });\n      const systemMessage = {\n        role: \"system\",\n        content: \"Explain all concepts like I am 10 years old.\"\n      };\n      const apiRequestBody = {\n        model: \"gpt-3.5-turbo\",\n        messages: [systemMessage, ...apiMessage]\n      };\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer\" + API_KEY,\n          // Use environment variable or server to secure API key\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(data);\n      setMessages(prevMessages => [...prevMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n    } catch (error) {\n      console.error('Failed to fetch or parse:', error);\n      handleAPIError(error.status || 0); // Handle generic or specific errors\n    } finally {\n      setTyping(false); // Ensure typing is set to false in any case\n    }\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"relative\",\n      height: \"800px\",\n      width: \"700px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MessageList, {\n    scrollBehavior: \"smooth\",\n    typingIndicator: typing ? /*#__PURE__*/React.createElement(TypingIndicator, {\n      content: \"ChatGPT is Typing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 76\n      }\n    }) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, messages.map((message, i) => /*#__PURE__*/React.createElement(Message, {\n    key: i,\n    model: {\n      message: message.message,\n      direction: message.direction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(MessageInput, {\n    placeholder: \"Type message here\",\n    onSend: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })))));\n}\nexport default App;","map":{"version":3,"names":["ChatContainer","MainContainer","Message","MessageInput","MessageList","TypingIndicator","React","useState","API_KEY","App","typing","setTyping","messages","setMessages","message","sender","direction","retryCount","setRetryCount","maxRetries","handleSend","newMessage","prevMessages","processMessageToChatGPT","handleAPIError","statusCode","delay","Math","pow","setTimeout","console","error","chatMessages","apiMessage","map","messageObject","role","content","systemMessage","apiRequestBody","model","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","log","choices","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","position","height","width","scrollBehavior","typingIndicator","i","key","placeholder","onSend"],"sources":["C:/Users/madhu/COSMOCHAT-UI/cosmochatui/src/App.js"],"sourcesContent":["import { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport React, { useState } from 'react';\nimport './App.css';\n\nconst API_KEY = \"sk-None-D5lH5Bi5CZOzitfWuXiJT3BlbkFJKfXbg2qxC6EAVpiuSiDb\";\nfunction App() {\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I am ChatGPT\",\n      sender: \"CHATGPT\",\n      direction: \"incoming\"\n    }\n  ]);\n  const [retryCount, setRetryCount] = useState(0);\n  const maxRetries = 3;\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setTyping(true);\n    await processMessageToChatGPT([...messages, newMessage]);\n  };\n\n  async function handleAPIError(statusCode) {\n    if (statusCode === 429 && retryCount < maxRetries) {\n      const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff\n      setTimeout(() => {\n        setRetryCount(retryCount + 1);\n        processMessageToChatGPT(messages); // Retry the API request after the delay\n      }, delay);\n    } else {\n      setRetryCount(0); // Reset retry count on different error or max retries reached\n      console.error('API Error or max retries reached with status:', statusCode);\n    }\n  }\n\n  async function processMessageToChatGPT(chatMessages) {\n    try {\n      const apiMessage = chatMessages.map((messageObject) => {\n        return {\n          role: messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\",\n          content: messageObject.message\n        };\n      });\n\n      const systemMessage = {\n        role: \"system\",\n        content: \"Explain all concepts like I am 10 years old.\"\n      };\n\n      const apiRequestBody = {\n        model: \"gpt-3.5-turbo\",\n        messages: [systemMessage, ...apiMessage]\n      };\n\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": \"Bearer\" + API_KEY, // Use environment variable or server to secure API key\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(data);\n\n      setMessages(prevMessages => [\n        ...prevMessages,\n        {\n          message: data.choices[0].message.content,\n          sender: \"ChatGPT\"\n        }\n      ]);\n    } catch (error) {\n      console.error('Failed to fetch or parse:', error);\n      handleAPIError(error.status || 0); // Handle generic or specific errors\n    } finally {\n      setTyping(false); // Ensure typing is set to false in any case\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ position: \"relative\", height: \"800px\", width: \"700px\" }}>\n        <MainContainer>\n          <ChatContainer>\n            <MessageList scrollBehavior=\"smooth\" typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is Typing\" /> : null}>\n              {messages.map((message, i) => (\n                <Message key={i} model={{\n                  message: message.message,\n                  direction: message.direction\n                }} />\n              ))}\n            </MessageList>\n            <MessageInput placeholder=\"Type message here\" onSend={handleSend} />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}