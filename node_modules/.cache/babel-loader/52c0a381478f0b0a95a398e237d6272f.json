{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhu\\\\COSMOCHAT-UI\\\\cosmochatui\\\\src\\\\App.js\";\nimport { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport React, { useState } from 'react';\nimport './App.css';\nconst API_KEY = \"sk-None-D5lH5Bi5CZOzitfWuXiJT3BlbkFJKfXbg2qxC6EAVpiuSiDb\";\nfunction App() {\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello,Iam ChatGPT\",\n    sender: \"CHATGPT\",\n    direction: \"incoming\"\n  }]);\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function handleAPIError(statusCode) {\n    if (statusCode === 429 && retryCount < maxRetries) {\n      const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff\n      setTimeout(() => {\n        retryCount++;\n        fetch(); // Retry the API request after the delay\n      }, delay);\n    } else {\n      // Handle the error condition or notify the user\n    }\n  }\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessage = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like Iam 10 years old.\"\n    };\n    const apiRequestBody = {\n      \"model\": \"gpt-3.5-turbo\",\n      \"messages\": [systemMessage, ...apiMessage]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(response => {\n      if (response.ok) {\n        // If the response is ok, then parse the JSON.\n        return response.json();\n      } else {\n        // If the response is not ok, handle the error with the status code.\n        handleAPIError(response.status);\n        // It's important to throw an error here to break the promise chain.\n        throw new Error('Response not ok');\n      }\n    }).then(data => {\n      // Log the data to the console.\n      console.log(data);\n      // Assuming 'data.choices[0].message.content' is the correct path to your desired content.\n      console.log(data.choices[0].message.content);\n      // Set the messages state by appending the new message from the API.\n      setMessages(chatMessages => [...chatMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      // Stop showing the typing indicator.\n      setTyping(false);\n    }).catch(error => {\n      // Handle any errors that occur during fetch or JSON parsing.\n      console.error('Failed to fetch or parse:', error);\n      handleAPIError(0); // Simulate a generic error\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"relative\",\n      height: \"800px\",\n      width: \"700px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MessageList, {\n    scrollBehavior: \"smooth\",\n    typingIndicator: typing ? /*#__PURE__*/React.createElement(TypingIndicator, {\n      content: \"ChatGPT is Typing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 36\n      }\n    }) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, messages.map((message, i) => /*#__PURE__*/React.createElement(Message, {\n    key: i,\n    model: {\n      message: message.message,\n      direction: message.direction\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(MessageInput, {\n    placeholder: \"Type message here\",\n    onSend: message => handleSend(message),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  })))));\n}\nexport default App;","map":{"version":3,"names":["ChatContainer","MainContainer","Message","MessageInput","MessageList","TypingIndicator","React","useState","API_KEY","App","typing","setTyping","messages","setMessages","message","sender","direction","handleSend","newMessage","newMessages","processMessageToChatGPT","handleAPIError","statusCode","retryCount","maxRetries","delay","Math","pow","setTimeout","fetch","chatMessages","apiMessage","map","messageObject","role","content","systemMessage","apiRequestBody","method","headers","body","JSON","stringify","then","response","ok","json","status","Error","data","console","log","choices","catch","error","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","position","height","width","scrollBehavior","typingIndicator","i","key","model","placeholder","onSend"],"sources":["C:/Users/madhu/COSMOCHAT-UI/cosmochatui/src/App.js"],"sourcesContent":["import { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport React, { useState } from 'react';\nimport './App.css';\n\nconst API_KEY = \"sk-None-D5lH5Bi5CZOzitfWuXiJT3BlbkFJKfXbg2qxC6EAVpiuSiDb\";\n\nfunction App() {\n  const[typing,setTyping]=useState(false);\n  const[messages,setMessages]=useState([\n    {\n      message: \"Hello,Iam ChatGPT\",\n      sender : \"CHATGPT\",\n      direction :\"incoming\"\n      \n    }\n  ]);\n\n\n  const handleSend=async(message) =>{\n    const newMessage={\n      message : message,\n      sender : \"user\",\n      direction:\"outgoing\"\n    }\n\n    const newMessages=[...messages,newMessage];\n    setMessages(newMessages);\n\n    setTyping(true);\n\n    await processMessageToChatGPT(newMessages);\n\n  }\n\n  async function handleAPIError(statusCode) {\n    if (statusCode === 429 && retryCount < maxRetries) {\n      const delay = Math.pow(2, retryCount) * 1000; // Exponential backoff\n      setTimeout(() => {\n        retryCount++;\n        fetch(); // Retry the API request after the delay\n      }, delay);\n    } else {\n      // Handle the error condition or notify the user\n    }\n  }\n  async function processMessageToChatGPT(chatMessages)\n  {\n    let apiMessage=chatMessages.map((messageObject) =>\n    {\n      let role=\"\";\n      if(messageObject.sender === \"ChatGPT\")\n      {\n        role=\"assistant\"\n      }else\n      {\n        role=\"user\"\n      }\n\n      return{role : role,content : messageObject.message}\n    });\n\n    const systemMessage={\n      role : \"system\",\n      content : \"Explain all concepts like Iam 10 years old.\"\n    }\n    const apiRequestBody ={\n\n      \"model\":\"gpt-3.5-turbo\",\n      \"messages\":[\n        systemMessage,\n        ...apiMessage\n      ]\n    \n    }\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\",{\n\n      method:\"POST\",\n      headers:{\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\" : \"application/json\"\n      },\n\n      body : JSON.stringify(apiRequestBody)\n    }).then(response => {\n      if (response.ok) {\n        // If the response is ok, then parse the JSON.\n        return response.json();\n      } else {\n        // If the response is not ok, handle the error with the status code.\n        handleAPIError(response.status);\n        // It's important to throw an error here to break the promise chain.\n        throw new Error('Response not ok');\n      }\n    })\n    .then(data => {\n      // Log the data to the console.\n      console.log(data);\n      // Assuming 'data.choices[0].message.content' is the correct path to your desired content.\n      console.log(data.choices[0].message.content);\n      // Set the messages state by appending the new message from the API.\n      setMessages(chatMessages => [\n        ...chatMessages,\n        {\n          message: data.choices[0].message.content,\n          sender: \"ChatGPT\"\n        }\n      ]);\n      // Stop showing the typing indicator.\n      setTyping(false);\n    })\n    .catch(error => {\n      // Handle any errors that occur during fetch or JSON parsing.\n      console.error('Failed to fetch or parse:', error);\n      handleAPIError(0); // Simulate a generic error\n    });\n  \n  }\n  return (\n    <div className=\"App\">\n      <div style={{position: \"relative\",height:\"800px\",width:\"700px\"}}>\n        <MainContainer>\n          <ChatContainer>\n          <MessageList \n          scrollBehavior='smooth'\n          typingIndicator={typing? <TypingIndicator content=\"ChatGPT is Typing\"/> : null}>\n\n          {\n            messages.map(\n              (message,i)=>(\n                <Message key={i} model={{ \n                  message: message.message, \n                  direction: message.direction \n                }} />\n              )\n            )\n          }\n          </MessageList>\n          \n          <MessageInput placeholder=\"Type message here\" onSend={(message) => handleSend(message)} />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}