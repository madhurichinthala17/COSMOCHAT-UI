{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhu\\\\COSMOCHAT-UI\\\\cosmochatui\\\\src\\\\App.js\";\nimport { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { Box } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nconst API_KEY = \"sk-None-D5lH5Bi5CZOzitfWuXiJT3BlbkFJKfXbg2qxC6EAVpiuSiDb\";\nconst INACTIVITY_TIMEOUT = 300000; // 5 minutes in milliseconds\n\nfunction App() {\n  const [chatStarted, setChatStarted] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [timer, setTimer] = useState(null);\n  const handleSend = async userInput => {\n    resetTimer();\n    const userMessage = {\n      message: userInput,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    updateMessages(userMessage);\n    await processMessageToChatGPT(userInput);\n  };\n  const updateMessages = newMessage => {\n    setMessages(messages => [...messages, newMessage]);\n  };\n  const endChat = () => {\n    localStorage.setItem('chatHistory', JSON.stringify(messages));\n    setChatStarted(false);\n    setMessages([]);\n    clearTimeout(timer);\n  };\n  const resetTimer = () => {\n    clearTimeout(timer);\n    const newTimer = setTimeout(() => {\n      endChat();\n      alert('Chat ended due to inactivity.');\n    }, INACTIVITY_TIMEOUT);\n    setTimer(newTimer);\n  };\n  useEffect(() => {\n    if (chatStarted) {\n      resetTimer();\n    }\n    return () => clearTimeout(timer);\n  }, [chatStarted]);\n  async function processMessageToChatGPT(userInput) {\n    const apiRequestBody = {\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"Explain all concepts like I am 10 years old.\"\n      }, {\n        role: \"user\",\n        content: userInput\n      }]\n    };\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${API_KEY}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n      if (!response.ok) {\n        throw new Error('HTTP error', response.status);\n      }\n      const data = await response.json();\n      const chatGPTMessage = {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\",\n        direction: \"incoming\"\n      };\n      updateMessages(chatGPTMessage);\n    } catch (error) {\n      console.error(\"Failed to fetch or parse:\", error);\n    } finally {\n      setTyping(false);\n    }\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    sx: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MainContainer, {\n    style: {\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChatContainer, {\n    style: {\n      flex: 9\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MessageList, {\n    scrollBehavior: \"smooth\",\n    typingIndicator: typing ? /*#__PURE__*/React.createElement(TypingIndicator, {\n      content: \"ChatGPT is Typing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 76\n      }\n    }) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, messages.map((message, i) => /*#__PURE__*/React.createElement(Message, {\n    key: i,\n    model: {\n      message: message.message,\n      direction: message.direction\n    },\n    className: message.direction === \"incoming\" ? \"incoming-message\" : \"outgoing-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }))), chatStarted && /*#__PURE__*/React.createElement(MessageInput, {\n    placeholder: \"Type message here\",\n    onSend: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  })), chatStarted ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: endChat,\n    style: {\n      padding: '10px 30px',\n      width: '100%',\n      marginTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"End Chat\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setChatStarted(true),\n    style: {\n      padding: '10px 30px',\n      width: '100%',\n      marginTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Start Chat\"))));\n}\nexport default App;","map":{"version":3,"names":["ChatContainer","MainContainer","Message","MessageInput","MessageList","TypingIndicator","Box","React","useEffect","useState","API_KEY","INACTIVITY_TIMEOUT","App","chatStarted","setChatStarted","typing","setTyping","messages","setMessages","timer","setTimer","handleSend","userInput","resetTimer","userMessage","message","sender","direction","updateMessages","processMessageToChatGPT","newMessage","endChat","localStorage","setItem","JSON","stringify","clearTimeout","newTimer","setTimeout","alert","apiRequestBody","model","role","content","response","fetch","method","headers","body","ok","Error","status","data","json","chatGPTMessage","choices","error","console","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","sx","height","display","flexDirection","style","flexGrow","flex","scrollBehavior","typingIndicator","map","i","key","placeholder","onSend","onClick","padding","width","marginTop"],"sources":["C:/Users/madhu/COSMOCHAT-UI/cosmochatui/src/App.js"],"sourcesContent":["import { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { Box } from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\n\nconst API_KEY = \"sk-None-D5lH5Bi5CZOzitfWuXiJT3BlbkFJKfXbg2qxC6EAVpiuSiDb\";\nconst INACTIVITY_TIMEOUT = 300000; // 5 minutes in milliseconds\n\nfunction App() {\n  const [chatStarted, setChatStarted] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [timer, setTimer] = useState(null);\n\n  const handleSend = async (userInput) => {\n    resetTimer();\n    const userMessage = {\n      message: userInput,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    updateMessages(userMessage);\n    await processMessageToChatGPT(userInput);\n  };\n\n  const updateMessages = (newMessage) => {\n    setMessages(messages => [...messages, newMessage]);\n  };\n\n  const endChat = () => {\n    localStorage.setItem('chatHistory', JSON.stringify(messages));\n    setChatStarted(false);\n    setMessages([]);\n    clearTimeout(timer);\n  };\n\n  const resetTimer = () => {\n    clearTimeout(timer);\n    const newTimer = setTimeout(() => {\n      endChat();\n      alert('Chat ended due to inactivity.');\n    }, INACTIVITY_TIMEOUT);\n    setTimer(newTimer);\n  };\n\n  useEffect(() => {\n    if (chatStarted) {\n      resetTimer();\n    }\n    return () => clearTimeout(timer);\n  }, [chatStarted]);\n\n  async function processMessageToChatGPT(userInput) {\n    const apiRequestBody = {\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Explain all concepts like I am 10 years old.\"\n        },\n        {\n          role: \"user\",\n          content: userInput\n        }\n      ]\n    };\n\n    try {\n      const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: \"POST\",\n        headers: {\n          \"Authorization\": `Bearer ${API_KEY}`,\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(apiRequestBody)\n      });\n\n      if (!response.ok) {\n        throw new Error('HTTP error', response.status);\n      }\n\n      const data = await response.json();\n      const chatGPTMessage = {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\",\n        direction: \"incoming\"\n      };\n      updateMessages(chatGPTMessage);\n    } catch (error) {\n      console.error(\"Failed to fetch or parse:\", error);\n    } finally {\n      setTyping(false);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Box sx={{ height: \"100vh\", display: \"flex\", flexDirection: \"column\" }}>\n        <MainContainer style={{ flexGrow: 1, display: 'flex', flexDirection: 'column', height: '100%' }}>\n          <ChatContainer style={{ flex: 9 }}>\n            <MessageList scrollBehavior=\"smooth\" typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is Typing\" /> : null}>\n              {messages.map((message, i) => (\n                <Message key={i} model={{ message: message.message, direction: message.direction }}\n                  className={message.direction === \"incoming\" ? \"incoming-message\" : \"outgoing-message\"} />\n              ))}\n            </MessageList>\n            {chatStarted && (\n              <MessageInput placeholder=\"Type message here\" onSend={handleSend} />\n            )}\n          </ChatContainer>\n          {chatStarted ? (\n            <button onClick={endChat} style={{ padding: '10px 30px', width: '100%', marginTop: '10px' }}>\n              End Chat\n            </button>\n          ) : (\n            <button onClick={() => setChatStarted(true)} style={{ padding: '10px 30px', width: '100%', marginTop: '10px' }}>\n              Start Chat\n            </button>\n          )}\n        </MainContainer>\n      </Box>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}