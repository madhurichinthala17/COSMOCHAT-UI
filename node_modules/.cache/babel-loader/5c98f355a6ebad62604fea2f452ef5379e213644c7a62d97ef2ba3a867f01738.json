{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhu\\\\COSMOCHAT-UI\\\\cosmochatui\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = sk - None - mrwfPEYhdR9tUw6PwcHZT3BlbkFJApaG374Z5m7cA109Ujks;\nfunction App() {\n  _s();\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello,Iam ChatGPT\",\n    sender: \"CHATGPT\",\n    direction: \"incoming\"\n  }]);\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    await processMessageToChatGPT(chatMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessage = chatMessages.map(messageObject => {\n      let role = \"\";\n      if (messageObject.sender === \"ChatGPT\") {\n        role = \"assistant\";\n      } else {\n        role = \"user\";\n      }\n      return {\n        role: role,\n        content: messageObject.message\n      };\n    });\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        height: \"800px\",\n        width: \"700px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(MainContainer, {\n        children: /*#__PURE__*/_jsxDEV(ChatContainer, {\n          children: [/*#__PURE__*/_jsxDEV(MessageList, {\n            typingIndicator: typing ? /*#__PURE__*/_jsxDEV(TypingIndicator, {\n              content: \"ChatGPT is Typing\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 36\n            }, this) : null,\n            children: messages.map((message, i) => /*#__PURE__*/_jsxDEV(Message, {\n              model: {\n                message: message.message,\n                direction: message.direction\n              }\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            placeholder: \"Type message here\",\n            onSend: message => handleSend(message)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"j9iIMBRZZLlv+T6nZVZxR0oN5LE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ChatContainer","MainContainer","Message","MessageInput","MessageList","TypingIndicator","useState","jsxDEV","_jsxDEV","API_KEY","sk","None","mrwfPEYhdR9tUw6PwcHZT3BlbkFJApaG374Z5m7cA109Ujks","App","_s","typing","setTyping","messages","setMessages","message","sender","direction","handleSend","newMessage","newMessages","processMessageToChatGPT","chatMessages","apiMessage","map","messageObject","role","content","fetch","method","headers","body","JSON","stringify","apiRequestBody","className","children","style","position","height","width","typingIndicator","fileName","_jsxFileName","lineNumber","columnNumber","i","model","placeholder","onSend","_c","$RefreshReg$"],"sources":["C:/Users/madhu/COSMOCHAT-UI/cosmochatui/src/App.js"],"sourcesContent":["import { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport { useState } from 'react';\nimport './App.css';\n\nconst API_KEY = sk-None-mrwfPEYhdR9tUw6PwcHZT3BlbkFJApaG374Z5m7cA109Ujks;\n\nfunction App() {\n  const[typing,setTyping]=useState(false);\n  const[messages,setMessages]=useState([\n    {\n      message: \"Hello,Iam ChatGPT\",\n      sender : \"CHATGPT\",\n      direction :\"incoming\"\n      \n    }\n  ]);\n\n\n  const handleSend=async(message) =>{\n    const newMessage={\n      message : message,\n      sender : \"user\",\n      direction:\"outgoing\"\n    }\n\n    const newMessages=[...messages,newMessage];\n    setMessages(newMessages);\n\n    setTyping(true);\n\n    await processMessageToChatGPT(chatMessages);\n\n  }\n\n  async function processMessageToChatGPT(chatMessages)\n  {\n    let apiMessage=chatMessages.map((messageObject) =>\n    {\n      let role=\"\";\n      if(messageObject.sender === \"ChatGPT\")\n      {\n        role=\"assistant\"\n      }else\n      {\n        role=\"user\"\n      }\n\n      return{role : role,content : messageObject.message}\n    });\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\",{\n\n      method:\"POST\",\n      headers:{\n        \"Authorization\": \"Bearer \" + API_KEY,\n        \"Content-Type\" : \"application/json\"\n      },\n\n      body : JSON.stringify(apiRequestBody)\n    }\n\n\n\n    )\n  }\n  return (\n    <div className=\"App\">\n      <div style={{position: \"relative\",height:\"800px\",width:\"700px\"}}>\n        <MainContainer>\n          <ChatContainer>\n          <MessageList \n          \n          typingIndicator={typing? <TypingIndicator content=\"ChatGPT is Typing\"/> : null}>\n\n          {\n            messages.map(\n              (message,i)=>(\n                <Message key={i} model={{ \n                  message: message.message, \n                  direction: message.direction \n                }} />\n              )\n            )\n          }\n          </MessageList>\n          \n          <MessageInput placeholder=\"Type message here\" onSend={(message) => handleSend(message)} />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}