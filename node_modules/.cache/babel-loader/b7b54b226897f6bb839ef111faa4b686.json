{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madhu\\\\COSMOCHAT-UI\\\\cosmochatui\\\\src\\\\App.js\";\nimport { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport React, { useState } from 'react';\nimport './App.css';\nfunction App() {\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([{\n    message: \"Hello, I am ChatGPT\",\n    sender: \"CHATGPT\",\n    direction: \"incoming\"\n  }]);\n  const [chatStarted, setChatStarted] = useState(false);\n  const handleSend = async message => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessage = chatMessages.map(messageObject => ({\n      role: messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\",\n      content: messageObject.message\n    }));\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am 10 years old.\"\n    };\n    const apiRequestBody = {\n      model: \"gpt-3.5-turbo\",\n      messages: [systemMessage, ...apiMessage]\n    };\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer your_api_key\",\n        // Replace with your actual API key\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(response => response.json()).then(data => {\n      console.log(data); // Debug: Output the API response\n      setMessages(prevMessages => [...prevMessages, {\n        message: data.choices[0].message.content,\n        sender: \"ChatGPT\"\n      }]);\n      setTyping(false);\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: \"center\",\n      height: \"600px\",\n      width: \"600px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MainContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, chatStarted ? /*#__PURE__*/React.createElement(ChatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MessageList, {\n    scrollBehavior: \"smooth\",\n    typingIndicator: typing ? /*#__PURE__*/React.createElement(TypingIndicator, {\n      content: \"ChatGPT is Typing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 78\n      }\n    }) : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, messages.map((message, i) => /*#__PURE__*/React.createElement(Message, {\n    key: i,\n    model: {\n      message: message.message,\n      direction: message.direction\n    },\n    className: message.direction === \"incoming\" ? \"incoming-message\" : \"outgoing-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(MessageInput, {\n    placeholder: \"Type message here\",\n    onSend: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  })) : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setChatStarted(true),\n    style: {\n      margin: '20px',\n      padding: '10px 20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, \"Start Chat\"))));\n}\nexport default App;","map":{"version":3,"names":["ChatContainer","MainContainer","Message","MessageInput","MessageList","TypingIndicator","React","useState","App","typing","setTyping","messages","setMessages","message","sender","direction","chatStarted","setChatStarted","handleSend","newMessage","newMessages","processMessageToChatGPT","chatMessages","apiMessage","map","messageObject","role","content","systemMessage","apiRequestBody","model","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","prevMessages","choices","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","position","height","width","scrollBehavior","typingIndicator","i","key","placeholder","onSend","onClick","margin","padding"],"sources":["C:/Users/madhu/COSMOCHAT-UI/cosmochatui/src/App.js"],"sourcesContent":["import { ChatContainer, MainContainer, Message, MessageInput, MessageList, TypingIndicator } from '@chatscope/chat-ui-kit-react';\nimport '@chatscope/chat-ui-kit-styles/dist/default/styles.min.css';\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [typing, setTyping] = useState(false);\n  const [messages, setMessages] = useState([\n    {\n      message: \"Hello, I am ChatGPT\",\n      sender: \"CHATGPT\",\n      direction: \"incoming\"\n    }\n  ]);\n  const [chatStarted, setChatStarted] = useState(false);\n\n  const handleSend = async (message) => {\n    const newMessage = {\n      message: message,\n      sender: \"user\",\n      direction: \"outgoing\"\n    };\n\n    const newMessages = [...messages, newMessage];\n    setMessages(newMessages);\n    setTyping(true);\n    await processMessageToChatGPT(newMessages);\n  };\n\n  async function processMessageToChatGPT(chatMessages) {\n    let apiMessage = chatMessages.map(messageObject => ({\n      role: messageObject.sender === \"ChatGPT\" ? \"assistant\" : \"user\",\n      content: messageObject.message\n    }));\n\n    const systemMessage = {\n      role: \"system\",\n      content: \"Explain all concepts like I am 10 years old.\"\n    };\n\n    const apiRequestBody = {\n      model: \"gpt-3.5-turbo\",\n      messages: [systemMessage, ...apiMessage]\n    };\n\n    await fetch(\"https://api.openai.com/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Authorization\": \"Bearer your_api_key\",  // Replace with your actual API key\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(apiRequestBody)\n    }).then(response => response.json())\n      .then(data => {\n        console.log(data); // Debug: Output the API response\n        setMessages(prevMessages => [\n          ...prevMessages,\n          {\n            message: data.choices[0].message.content,\n            sender: \"ChatGPT\"\n          }\n        ]);\n        setTyping(false);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{ position: \"center\", height: \"600px\", width: \"600px\" }}>\n        <MainContainer>\n          {chatStarted ? (\n            <ChatContainer>\n              <MessageList scrollBehavior=\"smooth\" typingIndicator={typing ? <TypingIndicator content=\"ChatGPT is Typing\" /> : null}>\n                {messages.map((message, i) => (\n                  <Message key={i} model={{ message: message.message, direction: message.direction }}\n                    className={message.direction === \"incoming\" ? \"incoming-message\" : \"outgoing-message\"} />\n                ))}\n              </MessageList>\n              <MessageInput placeholder=\"Type message here\" onSend={handleSend} />\n            </ChatContainer>\n          ) : (\n            <button onClick={() => setChatStarted(true)} style={{ margin: '20px', padding: '10px 20px' }}>\n              Start Chat\n            </button>\n          )}\n        </MainContainer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}